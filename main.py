# -*- coding: utf-8 -*-
"""Adobe_1a.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1SkCU-ZN5kffyb2dUC2FZpctLvv4NRDrT
"""

!git clone https://github.com/kermitt2/grobid
!cd /content/grobid && ./gradlew clean install
!pip install pymupdf

!curl http://localhost:8070/api/isalive

import subprocess
grobid_server = subprocess.Popen(
    ["./gradlew", "run"],
    cwd="/content/grobid"
)

import time, requests

time.sleep(15)

try:
    r = requests.get("http://localhost:8070/api/isalive")
    print("GROBID is running:", r.text)
except Exception as e:
    print("Error:", e)

import requests

pdf_path = "/content/app/input/sample.pdf"

with open(pdf_path, 'rb') as pdf_file:
    response = requests.post(
        "http://localhost:8070/api/processFulltextDocument",
        files={"input": pdf_file}
    )

if response.status_code == 200:
    print("Successfully processed PDF")
    xml_output = response.text
    print(xml_output[:1000])
else:
    print(f"Failed: {response.status_code}")

import xml.etree.ElementTree as ET

def extract_outline_from_tei(xml_text):
    ns = {'tei': 'http://www.tei-c.org/ns/1.0'}
    root = ET.fromstring(xml_text)

    title_elem = root.find('.//tei:titleStmt/tei:title', ns)
    title = title_elem.text.strip() if title_elem is not None and title_elem.text else "Untitled"

    outline = []

    for div in root.findall('.//tei:body//tei:div', ns):
        head = div.find('tei:head', ns)
        if head is not None and head.text:
            outline.append({
                "level": "H1",
                "text": head.text.strip(),
                "page": None
            })

        for sub_div in div.findall('.//tei:div', ns):
            sub_head = sub_div.find('tei:head', ns)
            if sub_head is not None and sub_head.text:
                outline.append({
                    "level": "H2",
                    "text": sub_head.text.strip(),
                    "page": None
                })

    return {
        "title": title,
        "outline": outline
    }

import fitz
import json

def add_page_numbers_to_outline(outline, pdf_path):
    doc = fitz.open(pdf_path)
    for item in outline:
        for page_num, page in enumerate(doc):
            if item['text'] in page.get_text():
                item['page'] = page_num + 1
                break
    return outline

data=extract_outline_from_tei(xml_output)
data['outline']=add_page_numbers_to_outline(data['outline'],'/content/app/input/sample.pdf')
print(data)
with open("/content/app/output/challenge1b_output.json", "w") as f:
    json.dump(data, f, indent=2)

from pprint import pprint
pprint(data)